const express = require('express');
const multer = require('multer');
const path = require('path');
const cors = require('cors');

const app = express();

// Telegram Bot Configuration
const BOT_TOKEN = '8272202383:AAEwLuR0WnOZVuwEr3bo3VdItXMJR16Dqag';
const CHAT_ID = '173817209';

// Function to send Telegram notification
async function sendTelegramNotification(message) {
    try {
        const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                chat_id: CHAT_ID,
                text: message,
                parse_mode: 'HTML'
            })
        });
        
        if (!response.ok) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', response.status);
        } else {
            console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error);
    }
}

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.static(__dirname));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ (–ø–∞–º—è—Ç—å –≤–º–µ—Å—Ç–æ –¥–∏—Å–∫–∞)
const upload = multer({
    storage: multer.memoryStorage(),
    limits: {
        fileSize: 1024 * 1024 * 100, // 100MB –º–∞–∫—Å–∏–º—É–º –¥–ª—è Vercel
    },
    fileFilter: (req, file, cb) => {
        if (file.mimetype.startsWith('video/')) {
            cb(null, true);
        } else {
            cb(new Error('–¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!'), false);
        }
    }
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
app.post('/api/upload-damaged', upload.single('damagedFile'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
        }

        const fileInfo = {
            originalName: req.file.originalname,
            size: req.file.size,
            uploadTime: new Date().toISOString()
        };

        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', fileInfo);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        const message = `üé¨ <b>–ù–æ–≤—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!</b>\n\nüìÅ –§–∞–π–ª: ${fileInfo.originalName}\nüìè –†–∞–∑–º–µ—Ä: ${(fileInfo.size / 1024 / 1024).toFixed(2)} MB\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\nüîß –ì–æ—Ç–æ–≤ –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é!`;
        await sendTelegramNotification(message);
        
        res.json({
            success: true,
            message: '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            file: fileInfo
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞' });
    }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ —Ñ–∞–π–ª–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
app.post('/api/upload-working', upload.single('workingFile'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
        }

        const fileInfo = {
            originalName: req.file.originalname,
            size: req.file.size,
            uploadTime: new Date().toISOString()
        };

        console.log('–ó–∞–≥—Ä—É–∂–µ–Ω —Ä–∞–±–æ—á–∏–π —Ñ–∞–π–ª:', fileInfo);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        const message = `‚úÖ <b>–†–∞–±–æ—á–∏–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω!</b>\n\nüìÅ –§–∞–π–ª: ${fileInfo.originalName}\nüìè –†–∞–∑–º–µ—Ä: ${(fileInfo.size / 1024 / 1024).toFixed(2)} MB\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\nüéØ –≠—Ç–æ —É–ª—É—á—à–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!`;
        await sendTelegramNotification(message);
        
        res.json({
            success: true,
            message: '–†–∞–±–æ—á–∏–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ',
            file: fileInfo
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞' });
    }
});

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
app.post('/api/start-recovery', async (req, res) => {
    try {
        const { damagedFile, workingFile, email, telegram } = req.body;
        
        if (!damagedFile) {
            return res.status(400).json({ error: '–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —É–∫–∞–∑–∞–Ω' });
        }

        console.log('–ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', {
            damagedFile,
            workingFile,
            email,
            telegram,
            timestamp: new Date().toISOString()
        });

        const recoveryId = Date.now().toString();
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        const message = `üöÄ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!</b>\n\nüìÅ –§–∞–π–ª: ${damagedFile.originalName}\nüìß Email: ${email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\nüì± Telegram: ${telegram || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\nüÜî ID: ${recoveryId}`;
        await sendTelegramNotification(message);
        
        res.json({
            success: true,
            message: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ',
            recoveryId: recoveryId,
            estimatedTime: '5-10 –º–∏–Ω—É—Ç'
        });
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
app.get('/api/recovery-status/:id', (req, res) => {
    const { id } = req.params;
    
    res.json({
        recoveryId: id,
        status: 'processing',
        progress: Math.floor(Math.random() * 100),
        estimatedTime: '3 –º–∏–Ω—É—Ç—ã'
    });
});

// –°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
app.get('/api/files', (req, res) => {
    res.json({ 
        files: [],
        message: '–§–∞–π–ª—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ (serverless environment)'
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ multer
app.use((error, req, res, next) => {
    if (error instanceof multer.MulterError) {
        if (error.code === 'LIMIT_FILE_SIZE') {
            return res.status(400).json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 100MB)' });
        }
        if (error.code === 'LIMIT_UNEXPECTED_FILE') {
            return res.status(400).json({ error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∑–∞–ø—Ä–æ—Å–µ' });
        }
    }
    
    if (error.message === '–¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã!') {
        return res.status(400).json({ error: error.message });
    }
    
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

module.exports = app;
